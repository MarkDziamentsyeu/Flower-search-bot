from aiogram import types
from dispatcher import dp
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hlink, hbold
from parser.by_piese import collect_data_by_piese_all
from parser.rouses import collect_data_rouse_1, collect_data_rouse_2
from parser.—Åhrysanthemum import collect_data_chrysanthemum_1, collect_data_chrysanthemum_2
from parser.alstroemeria import collect_data_alstroemeria_1, collect_data_alstroemeria_2
from parser.eustoma import collect_data_eustoma_1, collect_data_eustoma_2
from parser.other import collect_data_other_1
import json

 
@dp.message_handler(commands='start')
async def start(message: types.Message):
    '''command menu start'''
    
    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kebyord)

@dp.message_handler(Text(equals='üîô –ù–∞–∑–∞–¥'))
async def back(message: types.Message):
    '''command menu –ù–∞–∑–∞–¥'''

    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kebyord)


@dp.message_handler(Text(equals='–ë—É–∫–µ—Ç—ã'))
async def get_bouquets(message: types.Message):
    '''command menu –ë—É–∫–µ—Ç—ã'''

    buttons = ['–ë—É–∫–µ—Ç—ã —Å —Ä–æ–∑–∞–º–∏', '–ë—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏', '–ë—É–∫–µ—Ç—ã —Å \n–∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π', '–ë—É–∫–µ—Ç—ã —Å —ç—É—Å—Ç–æ–º–æ–π', '–î—Ä—É–≥–∏–µ –±—É–∫–µ—Ç—ã','üîô –ù–∞–∑–∞–¥']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons) 

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kebyord)


@dp.message_handler(Text(equals='–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ'))
async def get_flowers(message: types.Message):
    '''command menu –¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ'''
    buttons = ['–†–æ–∑—ã', '–ì–≤–æ–∑–¥–∏–∫–∏', '–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã', '–≠—É—Å—Ç–æ–º—ã', '–†–æ–º–∞—à–∫–∏', '–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏—è', '–ì–∏–ø–µ—Ä–∏–∫—É–º', '–°—Ç–∞—Ç–∏—Ü–∞', "–≠–≤–∫–∞–ª–∏–ø—Ç", '–õ–∏–ª–∏–∏', 'üîô –ù–∞–∑–∞–¥']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kebyord)




@dp.message_handler(Text(equals='–†–æ–∑—ã'))
async def get_rouse(message: types.Message):
    '''sending the first 10 items of rouses'''

    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('—Ä–æ–∑—ã')

        count = 0
        flowers = []

        for i in data:

            if "–†–æ–∑–∞" in i['name'] or "—Ä–æ–∑–∞" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')
        
        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)



@dp.message_handler(Text(equals='–ì–≤–æ–∑–¥–∏–∫–∏'))
async def get_carnation(message: types.Message):
    '''sending the first 10 items of catnation'''

    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–ì–≤–æ–∑–¥–∏–∫–∏')

        
        count = 0
        flowers = []

        for i in data:

            if "–ì–≤–æ–∑–¥–∏–∫–∞" in i['name'] or "–≥–≤–æ–∑–¥–∏–∫–∞" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break
        
        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã'))
async def get_chrysanthemum(message: types.Message):
    '''sending the first 10 items of chtysanthemum'''

    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã')

        
        count = 0
        flowers = []

        for i in data:

            if "–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞" in i['name'] or "—Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break
        
        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–≠—É—Å—Ç–æ–º—ã'))
async def get_eustoma(message: types.Message):
    '''sending the first 10 items of eustoma'''
    
    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–≠—É—Å—Ç–æ–º—ã')

        
        count = 0
        flowers = []

        for i in data:

            if "–≠—É—Å—Ç–æ–º–∞" in i['name'] or "—ç—É—Å—Ç–æ–º–∞" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–†–æ–º–∞—à–∫–∏'))
async def get_chamomile(message: types.Message):
    '''sending the first 10 items of chamomile'''
    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–†–æ–º–∞—à–∫–∏')

        
        count = 0
        flowers = []

        for i in data:

            if "–†–æ–º–∞—à–∫–∞" in i['name'] or "—Ä–æ–º–∞—à–∫–∞" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏—è'))
async def get_alstroemeria(message: types.Message):
    '''sending the first 10 items of alstromeria'''
    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–∏')

      
        count = 0
        flowers = []

        for i in data:

            if "–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏" in i['name'] or "–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)



@dp.message_handler(Text(equals='–ì–∏–ø–µ—Ä–∏–∫—É–º'))
async def get_hypericum(message: types.Message):
    '''sending the first 10 items of hyptricum'''

    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã ', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–ì–∏–ø–µ—Ä–∫—É–º')

        
        count = 0
        flowers = []

        for i in data:

            if "–ì–∏–ø–µ—Ä–∏–∫—É–º" in i['name'] or "–≥–∏–ø–µ—Ä–∏–∫—É–º" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)

@dp.message_handler(Text(equals='–°—Ç–∞—Ç–∏—Ü–∞'))
async def get_statice(message: types.Message):
    '''sending the first 10 items of statice'''

    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–°—Ç–∞—Ç–∏—Ü–∞')

        
        count = 0
        flowers = []

        for i in data:

            if "–°—Ç–∞—Ç–∏—Ü–∞" in i['name'] or "—Å—Ç–∞—Ç–∏—Ü–∞" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)



@dp.message_handler(Text(equals='–≠–≤–∫–∞–ª–∏–ø—Ç'))
async def get_eucalyptus(message: types.Message):
    '''sending the first 10 items of eucalyptus'''
    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–≠–≤–∫–∞–ª–∏–ø—Ç')

        
        count = 0
        flowers = []

        for i in data:

            if "–≠–≤–∫–∞–ª–∏–ø—Ç" in i['name'] or "–≠–≤–∫–∞–ª–∏–ø—Ç" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–õ–∏–ª–∏–∏'))
async def get_lilies(message: types.Message):
    '''sending the first 10 items of lilies '''

    buttons = ['–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ë—É–∫–µ—Ç—ã', '–ï—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_by_piese_all()

    with open('data/result_by_piese.json') as file:
        data = json.load(file)
        print('–õ–∏–ª–∏–∏')

        
        count = 0
        flowers = []

        for i in data:

            if "–õ–∏–ª–∏—è" in i['name'] or "–ª–∏–ª–∏—è" in i['name']:
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                
        count = 0
        for i in flowers:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        if len(flowers) > 10:
            await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë". \n–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë {len(flowers) - 10} –ø–æ–∑–∏—Ü–∏–π.')

        else:
            await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(flowers, file, indent=3, ensure_ascii=False)



@dp.message_handler(Text(equals='–ï—â—ë'))
async def get_flower_next(message: types.Message):
    '''sending next 10 items of some flower'''
    with open('data/flowers_by_piese.json') as file:
        cards = json.load(file)
        print(len(cards))
        del cards[0:10]
        print(len(cards))
        print('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë')
        
        count = 0
        for i in cards:
            count += 1
            await message.answer(i)
            if count == 10: 
                break

        balanse = len(cards) - 10
        if balanse > 0:
            balanse = len(cards) - 10

        else:
            balanse = 0

        await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å {balanse} –ø–æ–∑–∏—Ü–∏–π')
        

        with open('data/flowers_by_piese.json', 'w') as file:
            json.dump(cards, file, indent=3, ensure_ascii=False)
            



@dp.message_handler(Text(equals='–ë—É–∫–µ—Ç—ã —Å —Ä–æ–∑–∞–º–∏'))
async def get_rouse_buq(message: types.Message):
    '''sending the first 10 items of rouses'''
    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ï—â—ë –±—É–∫–µ—Ç—ã —Å —Ä–æ–∑–∞–º–∏']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_rouse_1()

    with open('data/rouse_buq_1.json') as file:
        data = json.load(file)
        print('–ë—É–∫–µ—Ç—ã —Å —Ä–æ–∑–∞–º–∏')

        
        count = 0
        flowers = []

        for i in data:

            
            card = f'{hlink( " ", i.get("image"))}' \
            f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

            flowers.append(card)

                        
    count = 0
    for i in flowers:
        count += 1
        await message.answer(i)
        if count == 10: 
            break



    if len(flowers) > 10:
        await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë –±—É–∫–µ—Ç—ã —Å —Ä–æ–∑–∞–º–∏".\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')

    else:
        await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    with open('data/rouse_buq_1.json', 'w') as file:
        json.dump(flowers, file, indent=3, ensure_ascii=False)

    collect_data_rouse_2()


   

    

@dp.message_handler(Text(equals='–ï—â—ë –±—É–∫–µ—Ç—ã —Å —Ä–æ–∑–∞–º–∏'))
async def get_rouse_next(message: types.Message):
    '''sending next 10 items of rouses'''
    #await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
    with open('data/rouse_buq_1.json') as file:
        cards = json.load(file)
        del cards[0:10]
        print('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë –±—É–∫–µ—Ç—ã —Ä–æ–∑')

        print(f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑_1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 10 = {len(cards)}')
        

    with open('data/rouse_buq_2.json') as file_2:
        data_2 = json.load(file_2)
        

        flowers_2 = []
        for i in data_2:
            
            card_2 = f'{hlink( " ", i.get("image"))}' \
            f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

            flowers_2.append(card_2)
    

    cards.extend(flowers_2)
        
    count = 0
    for i in cards:
        count += 1
        await message.answer(i)
        if count == 10: 
            break

    balanse = len(cards) - 10
    if balanse > 0:
        balanse = len(cards) - 10

    else:
        balanse = 0

    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å {balanse} –ø–æ–∑–∏—Ü–∏–π')
        

    with open('data/rouse_buq_1.json', 'w') as file:
        json.dump(cards, file, indent=3, ensure_ascii=False)

    with open('data/rouse_buq_2.json', "w") as file_2:
        flowers_2 = []
        json.dump(flowers_2,file_2, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–ë—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏'))
async def get_chrysanthemum_buq(message: types.Message):
    '''sending the first 10 items of chrysathemum'''
    
    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ï—â—ë –±—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_chrysanthemum_1()

    with open('data/chrysanthemum_buq_1.json') as file:
        data = json.load(file)
        print('–ë—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏')

        
        count = 0
        flowers = []

        for i in data:

            
            card = f'{hlink( " ", i.get("image"))}' \
            f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

            flowers.append(card)

                        
    count = 0
    for i in flowers:
        count += 1
        await message.answer(i)
        if count == 10: 
            break



    if len(flowers) > 10:
        await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë –±—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏".\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')

    else:
        await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    with open('data/chrysanthemum_buq_1.json', 'w') as file:
        json.dump(flowers, file, indent=3, ensure_ascii=False)

    collect_data_chrysanthemum_2()


@dp.message_handler(Text(equals='–ï—â—ë –±—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏'))
async def get_chrysanthemum_next(message: types.Message):
    '''sending next 10 items of chrysanthemum'''
    with open('data/chrysanthemum_buq_1.json') as file:
        cards = json.load(file)
        del cards[0:10]
        print('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë –±—É–∫–µ—Ç—ã —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º')

        print(f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º_1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 10 = {len(cards)}')
        

    with open('data/chrysanthemum_buq_2.json') as file_2:
        data_2 = json.load(file_2)
        


        flowers_2 = []


        for i in data_2:

            if "–•—Ä–∏–∑–∞" in i['name'] or "—Ö—Ä–∏–∑–∞" in i['name']:
                card_2 = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers_2.append(card_2)

            else:
                continue 
            
            
    

    cards.extend(flowers_2)
        
    count = 0
    for i in cards:
        count += 1
        await message.answer(i)
        if count == 10: 
            break

    balanse = len(cards) - 10
    if balanse > 0:
        balanse = len(cards) - 10

    else:
        balanse = 0

    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å {balanse} –ø–æ–∑–∏—Ü–∏–π')
        

    with open('data/chrysanthemum_buq_1.json', 'w') as file:
        json.dump(cards, file, indent=3, ensure_ascii=False)

    with open('data/chrysanthemum_buq_2.json', "w") as file_2:
        flowers_2 = []
        json.dump(flowers_2,file_2, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–ë—É–∫–µ—Ç—ã —Å \n–∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π'))
async def get_alstroemeria_buq(message: types.Message):
    '''sending the first 10 items of alstromeria'''

    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ï—â—ë –±—É–∫–µ—Ç—ã —Å –∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_alstroemeria_1()

    with open('data/alstroemeria_buq_1.json') as file:
        data = json.load(file)
        print('–ë—É–∫–µ—Ç—ã —Å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º–∞–º–∏')

        
        count = 0
        flowers = []

        for i in data:

            
            card = f'{hlink( " ", i.get("image"))}' \
            f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

            flowers.append(card)

                        
    count = 0
    for i in flowers:
        count += 1
        await message.answer(i)
        if count == 10: 
            break



    if len(flowers) > 10:
        await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë –±—É–∫–µ—Ç—ã —Å –∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π".\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')

    else:
        await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    with open('data/alstroemeria_buq_1.json', 'w') as file:
        json.dump(flowers, file, indent=3, ensure_ascii=False)

    collect_data_alstroemeria_2()


@dp.message_handler(Text(equals='–ï—â—ë –±—É–∫–µ—Ç—ã —Å –∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π'))
async def get_alstroemeria_next(message: types.Message):
    '''sending next 10 items of alstromeria'''
   
    with open('data/alstroemeria_buq_1.json') as file:
        cards = json.load(file)
        del cards[0:10]
        print('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë –±—É–∫–µ—Ç—ã –∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π')

        print(f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏–µ–π_1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 10 = {len(cards)}')
        

    with open('data/alstroemeria_buq_2.json') as file_2:
        data_2 = json.load(file_2)
        


        flowers_2 = []


        for i in data_2:

            if "–ê–ª—å—Å—Ç—Ä–æ" in i['name'] or "–∞–ª—å—Å—Ç—Ä–æ" in i['name']:
                card_2 = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers_2.append(card_2)

            else:
                continue 
            
            
    

    cards.extend(flowers_2)
        
    count = 0
    for i in cards:
        count += 1
        await message.answer(i)
        if count == 10: 
            break

    balanse = len(cards) - 10
    if balanse > 0:
        balanse = len(cards) - 10

    else:
        balanse = 0

    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å {balanse} –ø–æ–∑–∏—Ü–∏–π')
        

    with open('data/alstroemeria_buq_1.json', 'w') as file:
        json.dump(cards, file, indent=3, ensure_ascii=False)

    with open('data/alstroemeria_buq_2.json', "w") as file_2:
        flowers_2 = []
        json.dump(flowers_2,file_2, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–ë—É–∫–µ—Ç—ã —Å —ç—É—Å—Ç–æ–º–æ–π'))
async def get_eustoma_buq(message: types.Message):
    '''sending the first 10 items of eustoma'''
    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ï—â—ë –±—É–∫–µ—Ç—ã —Å —ç—É—Å—Ç–æ–º–æ–π']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_eustoma_1()

    with open('data/eustoma_buq_1.json') as file:
        data = json.load(file)
        print('–ë—É–∫–µ—Ç—ã —Å —ç—É—Å—Ç–æ–º–æ–π')

        
        count = 0
        flowers = []

        for i in data:

            
            card = f'{hlink( " ", i.get("image"))}' \
            f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

            flowers.append(card)

                        
    count = 0
    for i in flowers:
        count += 1
        await message.answer(i)
        if count == 10: 
            break



    if len(flowers) > 10:
        await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ï—â—ë –±—É–∫–µ—Ç—ã —Å —ç—É—Å—Ç–æ–º–æ–π".\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')

    else:
        await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    with open('data/eustoma_buq_1.json', 'w') as file:
        json.dump(flowers, file, indent=3, ensure_ascii=False)

    collect_data_eustoma_2()


@dp.message_handler(Text(equals='–ï—â—ë –±—É–∫–µ—Ç—ã —Å —ç—É—Å—Ç–æ–º–æ–π'))
async def get_eustoma_next(message: types.Message):
    '''sending next 10 items'''
    
    with open('data/eustoma_buq_1.json') as file:
        cards = json.load(file)
        del cards[0:10]
        print('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë –±—É–∫–µ—Ç—ã —ç—É—Å—Ç–æ–º–æ–π')

        print(f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —ç—É—Å—Ç–æ–º_1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 10 = {len(cards)}')
        

    with open('data/eustoma_buq_2.json') as file_2:
        data_2 = json.load(file_2)
        


        flowers_2 = []


        for i in data_2:

            if "–≠—É—Å—Ç–æ–º" in i['name'] or "–≠—É—Å—Ç–æ–º" in i['name']:
                card_2 = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers_2.append(card_2)

            else:
                continue 
            
            
    

    cards.extend(flowers_2)
        
    count = 0
    for i in cards:
        count += 1
        await message.answer(i)
        if count == 10: 
            break

    balanse = len(cards) - 10
    if balanse > 0:
        balanse = len(cards) - 10

    else:
        balanse = 0

    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å {balanse} –ø–æ–∑–∏—Ü–∏–π')
        

    with open('data/eustoma_buq_1.json', 'w') as file:
        json.dump(cards, file, indent=3, ensure_ascii=False)

    with open('data/eustoma_buq_2.json', "w") as file_2:
        flowers_2 = []
        json.dump(flowers_2,file_2, indent=3, ensure_ascii=False)


@dp.message_handler(Text(equals='–î—Ä—É–≥–∏–µ –±—É–∫–µ—Ç—ã'))
async def get_other_buq(message: types.Message):
    '''sending the first 10 items'''
    buttons = ['–ë—É–∫–µ—Ç—ã', '–¶–≤–µ—Ç—ã –ø–æ—à—Ç—É—á–Ω–æ', '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë']
    kebyord = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kebyord.add(*buttons)

    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å...\n–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', reply_markup=kebyord)

    collect_data_other_1()

    with open('data/other_buq_1.json') as file:
        data = json.load(file)
        print('–î—Ä—É–≥–∏–µ –±—É–∫–µ—Ç—ã')

        
        count = 0
        flowers = []

        for i in data:

            if "–ê–ª—å—Å—Ç—Ä–æ" not in i['name'] and "–∞–ª—å—Å—Ç—Ä–æ" not in i['name'] and "–≠—É—Å—Ç–æ–º" not in i['name'] and "—ç—É—Å—Ç–æ–º" not in i['name'] and "–•—Ä–∏–∑–∞" not in i['name'] and "—Ö—Ä–∏–∑–∞" not in i['name'] and "–†–æ–∑" not in i['name'] and "—Ä–æ–∑" not in i['name'] :
                card = f'{hlink( " ", i.get("image"))}' \
                f'{hlink(i.get("name") + " (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç)" , i.get("link"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: "), i.get("price")}\n '

                flowers.append(card)

            else:
                continue 

                        
    count = 0
    for i in flowers:
        count += 1
        await message.answer(i)
        if count == 10: 
            break



    if len(flowers) > 10:
        await message.answer(f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë".\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥')

    else:
        await message.answer('–≠—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    with open('data/other_buq_1.json', 'w') as file:
        json.dump(flowers, file, indent=3, ensure_ascii=False)

    


@dp.message_handler(Text(equals='–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'))
async def get_other_next(message: types.Message):
    '''sending next 10 items'''

    with open('data/other_buq_1.json') as file:
        cards = json.load(file)

        del cards[0:10]
        print('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë(other)')

        print(f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤  = {len(cards)}')
        
        
    count = 0
    for i in cards:
        count += 1
        await message.answer(i)
        if count == 10: 
            break

    balanse = len(cards) - 10
    if balanse > 0:
        balanse = len(cards) - 10

    else:
        balanse = 0

    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å {balanse} –ø–æ–∑–∏—Ü–∏–π')
        

    with open('data/other_buq_1.json', 'w') as file:
        json.dump(cards, file, indent=3, ensure_ascii=False)